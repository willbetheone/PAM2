  void PAMManifold::createBody(std::vector<CGLA::Vec3f>& polyline1,
                                 std::vector<CGLA::Vec3f>& polyline2,
                                 std::vector<std::vector<CGLA::Vec3f>>& debugAllRibs)
    {
        assert(polyline1.size() == polyline2.size());
        if (polyline1.size() < 4) {
            RA_LOG_WARN("Garbage point data");
            return;
        }

        //left line, right line and the centroid between them
        vector<Vec2f> polyline1_2d, polyline2_2d, polyline3_2d;
        for (int i = 0; i < polyline1.size(); i++)
        {
            Vec3f vWorld1 = viewMatrix.mul_3D_point(polyline1[i]);
            Vec3f vWorld2 = viewMatrix.mul_3D_point(polyline2[i]);
            polyline1_2d.push_back(Vec2f(vWorld1)); //drop z-coord
            polyline2_2d.push_back(Vec2f(vWorld2));
            polyline3_2d.push_back(0.5f * (polyline1_2d[i] + polyline2_2d[i]));
        }
//        float zValue = viewMatrix.mul_3D_point(polyline1[0])[2];
        float zValue = 0;
        
        //Find scaled step
        float c_step = length(viewMatrix.mul_3D_vector(Vec3f(5*kCENTROID_STEP,0,0)));
        vector<Vec2f> r_polyline1, r_polyline2, r_polyline3;
        reduceLineToEqualSegments2D(r_polyline1, polyline1_2d, c_step);
        reduceLineToEqualSegments2D(r_polyline2, polyline2_2d, c_step);
        reduceLineToEqualSegments2D(r_polyline3, polyline3_2d, c_step);
        
        vector<Vec2f> smoothPolyline2D;
        vector<Vec2f> smoothPolyline2DTangents;
        vector<Vec2f> smoothPolyline2DNormals;
        getSmoothCurve(r_polyline3, smoothPolyline2D, smoothPolyline2DTangents, smoothPolyline2DNormals, c_step);
        
        if (r_polyline3.size() < 4) {
            return;
        }
        
        //Calculate tangents and normals
//        vector<Vec2f> r_polyline3_t, r_polyline3_n;
//        getTangentsAndNormals2D(r_polyline3_t, r_polyline3_n, r_polyline3);
        
//        vector<float> ribWidths;
//        getRibWidths(r_polyline1, r_polyline2, r_polyline3, r_polyline3_n, ribWidths);
//        assert(ribWidths.size() == r_polyline3.size());
        
        //Parse new skeleton and create ribs
        //Ingore first and last centroids since they are poles
        int numSpines = 1;
        vector<vector<Vec3f>> allRibs(r_polyline3.size());
//        vector<Vec3f> skeletonModel, skeletonNormalsModel;
        
        vector<Vec3f> r_polyline3_model, r_polyline1_model, r_polyline2_model, r_polyline3_smooth_model;

//        for (int i = 0; i < r_polyline3.size(); i++)
//        {
//            Vec3f sModel = invert_affine(viewMatrix).mul_3D_point(Vec3f(r_polyline3[i], zValue));
//            Vec3f sModel1 = invert_affine(viewMatrix).mul_3D_point(Vec3f(r_polyline1[i], zValue));
//            Vec3f sModel2 = invert_affine(viewMatrix).mul_3D_point(Vec3f(r_polyline2[i], zValue));
//            Vec3f sModelSmooth = invert_affine(viewMatrix).mul_3D_point(Vec3f(smoothPolyline2D[i], zValue));
//
//            r_polyline3_model.push_back(sModel);
//            r_polyline1_model.push_back(sModel1);
//            r_polyline2_model.push_back(sModel2);
//            r_polyline3_smooth_model.push_back(sModelSmooth);
//            float ribWidth = ribWidths[i]; //0.3; //TODO
//            Vec3f nModel = invert_affine(viewMatrix).mul_3D_vector(Vec3f(ribWidth * r_polyline3_n[i], 0));
//            Vec3f tModel = invert_affine(viewMatrix).mul_3D_vector(Vec3f(r_polyline3_t[i], 0));
//            
//            if (i == 0)
//            {
//                vector<Vec3f> firstPole;
//                firstPole.push_back(sModel);
//                allRibs[0] = firstPole;
//            }
//            else if (i == r_polyline3.size() - 1)
//            {
//                vector<Vec3f> secondPole;
//                secondPole.push_back(sModel);
//                allRibs[i] = secondPole;
//            }
//            else
//            {
//                vector<Vec3f> ribs(numSpines);
//                float rot_step = 360.0f/numSpines;
//                for (int j = 0; j < numSpines; j++)
//                {
//                    float angle = j * rot_step;
//                    Quatf quat;
//                    quat.make_rot(angle*DEGREES_TO_RADIANS, normalize(tModel));
//                    Vec3f newNorm = quat.get_Mat4x4f().mul_3D_vector(nModel);
//                    Vec3f newRibPoint = sModel + newNorm;
//                    ribs[j] = newRibPoint;
//                    vector<Vec3f> norms(2);
//                    vector<Vec3f> tan(2);
//                    norms.push_back(sModel);
//                    norms.push_back(newRibPoint);
//                    tan.push_back(sModel);
//                    tan.push_back(sModel + ribWidth*normalize(tModel));
//                    debugAllRibs.push_back(norms);
//                    debugAllRibs.push_back(tan);
//                }
//                allRibs[i] = ribs;
//            }
//            skeletonModel.push_back(sModel);
//            skeletonNormalsModel.push_back(nModel);
//        }
        
        for (int i = 0; i < smoothPolyline2D.size(); i++)
        {
            Vec3f sModel = invert_affine(viewMatrix).mul_3D_point(Vec3f(smoothPolyline2D[i], zValue));
            Vec3f sModel1 = invert_affine(viewMatrix).mul_3D_point(Vec3f(r_polyline1[i], zValue));
            Vec3f sModel2 = invert_affine(viewMatrix).mul_3D_point(Vec3f(r_polyline2[i], zValue));
            
            r_polyline3_model.push_back(sModel);
            r_polyline1_model.push_back(sModel1);
            r_polyline2_model.push_back(sModel2);

            float ribWidth = 0.3; //TODO
            Vec3f nModel = invert_affine(viewMatrix).mul_3D_vector(Vec3f(ribWidth * smoothPolyline2DNormals[i], 0));
            Vec3f tModel = invert_affine(viewMatrix).mul_3D_vector(Vec3f(smoothPolyline2DTangents[i], 0));
            
            if (i == 0)
            {
                vector<Vec3f> firstPole;
                firstPole.push_back(sModel);
                allRibs[0] = firstPole;
            }
            else if (i == r_polyline3.size() - 1)
            {
                vector<Vec3f> secondPole;
                secondPole.push_back(sModel);
                allRibs[i] = secondPole;
            }
            else
            {
                vector<Vec3f> ribs(numSpines);
                float rot_step = 360.0f/numSpines;
                for (int j = 0; j < numSpines; j++)
                {
                    float angle = j * rot_step;
                    Quatf quat;
                    quat.make_rot(angle*DEGREES_TO_RADIANS, normalize(tModel));
                    Vec3f newNorm = quat.get_Mat4x4f().mul_3D_vector(nModel);
                    Vec3f newRibPoint = sModel + newNorm;
                    ribs[j] = newRibPoint;
                    vector<Vec3f> norms(2);
                    vector<Vec3f> tan(2);
                    norms.push_back(sModel);
                    norms.push_back(newRibPoint);
                    tan.push_back(sModel);
                    tan.push_back(sModel + ribWidth*normalize(tModel));
                    debugAllRibs.push_back(norms);
//                    debugAllRibs.push_back(tan);
                }
                allRibs[i] = ribs;
            }
//            skeletonModel.push_back(sModel);
//            skeletonNormalsModel.push_back(nModel);
        }

        
//        debugAllRibs = allRibs;
        debugAllRibs.push_back(r_polyline3_smooth_model);
        debugAllRibs.push_back(r_polyline3_model);
        debugAllRibs.push_back(r_polyline1_model);
        debugAllRibs.push_back(r_polyline2_model);
//        populateManifold(allRibs);
    }
